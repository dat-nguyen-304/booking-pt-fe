{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Days;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _TileGroup = _interopRequireDefault(require(\"../TileGroup\"));\nvar _Day = _interopRequireDefault(require(\"./Day\"));\nvar _dates = require(\"../shared/dates\");\nvar _propTypes2 = require(\"../shared/propTypes\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction Days(props) {\n  var activeStartDate = props.activeStartDate,\n    calendarType = props.calendarType;\n  var showFixedNumberOfWeeks = props.showFixedNumberOfWeeks,\n    showNeighboringMonth = props.showNeighboringMonth,\n    otherProps = _objectWithoutProperties(props, [\"showFixedNumberOfWeeks\", \"showNeighboringMonth\"]);\n  var year = (0, _dates.getYear)(activeStartDate);\n  var monthIndex = (0, _dates.getMonthIndex)(activeStartDate);\n  var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;\n  var dayOfWeek = (0, _dates.getDayOfWeek)(activeStartDate, calendarType);\n  var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;\n  /**\n   * Defines on which day of the month the grid shall start. If we simply show current\n   * month, we obviously start on day one, but if showNeighboringMonth is set to\n   * true, we need to find the beginning of the week the first day of the month is in.\n   */\n\n  var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;\n  /**\n   * Defines on which day of the month the grid shall end. If we simply show current\n   * month, we need to stop on the last day of the month, but if showNeighboringMonth\n   * is set to true, we need to find the end of the week the last day of the month is in.\n   */\n\n  var end = function () {\n    if (showFixedNumberOfWeeks) {\n      // Always show 6 weeks\n      return start + 6 * 7 - 1;\n    }\n    var daysInMonth = (0, _dates.getDaysInMonth)(activeStartDate);\n    if (showNeighboringMonth) {\n      var activeEndDate = new Date(year, monthIndex, daysInMonth);\n      return daysInMonth + (7 - (0, _dates.getDayOfWeek)(activeEndDate, calendarType) - 1);\n    }\n    return daysInMonth;\n  }();\n  return _react[\"default\"].createElement(_TileGroup[\"default\"], _extends({}, otherProps, {\n    className: \"react-calendar__month-view__days\",\n    count: 7,\n    currentMonthIndex: monthIndex,\n    dateTransform: function dateTransform(day) {\n      return new Date(year, monthIndex, day);\n    },\n    dateType: \"day\",\n    end: end,\n    offset: offset,\n    start: start,\n    tile: _Day[\"default\"]\n  }));\n}\nDays.propTypes = _objectSpread({\n  calendarType: _propTypes2.isCalendarType.isRequired,\n  showFixedNumberOfWeeks: _propTypes[\"default\"].bool,\n  showNeighboringMonth: _propTypes[\"default\"].bool\n}, _propTypes2.tileGroupProps);","map":null,"metadata":{},"sourceType":"script"}