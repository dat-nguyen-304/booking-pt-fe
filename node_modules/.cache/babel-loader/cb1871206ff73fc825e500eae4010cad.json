{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"between\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.between;\n  }\n});\nObject.defineProperty(exports, \"callIfDefined\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.callIfDefined;\n  }\n});\nexports.max = exports.min = void 0;\nvar _utils = require(\"react-calendar/dist/shared/utils\");\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nvar isValidNumber = function isValidNumber(a) {\n  return typeof a === 'number' && !isNaN(a);\n};\nvar min = function min() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));\n};\nexports.min = min;\nvar max = function max() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));\n};\nexports.max = max;","map":null,"metadata":{},"sourceType":"script"}