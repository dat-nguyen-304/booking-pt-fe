{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar EventWrapper = function (_React$Component) {\n  _inherits(EventWrapper, _React$Component);\n  function EventWrapper() {\n    _classCallCheck(this, EventWrapper);\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n  EventWrapper.prototype.render = function render() {\n    return this.props.children;\n  };\n  return EventWrapper;\n}(_react2.default.Component);\nexports.default = EventWrapper;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}