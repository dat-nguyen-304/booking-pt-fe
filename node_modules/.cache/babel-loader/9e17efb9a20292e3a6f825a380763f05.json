{"ast":null,"code":"var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\nexport function getFontShorthand(element) {\n  if (!element) {\n    return '';\n  }\n  var style = window.getComputedStyle(element);\n  if (style.font) {\n    return style.font;\n  }\n  var isFontDefined = style.fontFamily !== '';\n  if (!isFontDefined) {\n    return '';\n  }\n  var fontVariant = allowedVariants.includes(style.fontVariant) ? style.fontVariant : 'normal';\n  return \"\".concat(style.fontStyle, \" \").concat(fontVariant, \" \").concat(style.fontWeight, \" \").concat(style.fontSize, \" / \").concat(style.lineHeight, \" \").concat(style.fontFamily);\n}\nvar cachedCanvas;\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {string} text Text to measure\n * @param {string} font Font to use when measuring the text\n */\nexport function measureText(text, font) {\n  var canvas = cachedCanvas || (cachedCanvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d');\n  // Context type not supported\n  if (!context) {\n    return null;\n  }\n  context.font = font;\n  var width = context.measureText(text).width;\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\nexport function updateInputWidth(element) {\n  if (typeof document === 'undefined' || !element) {\n    return null;\n  }\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n  if (width === null) {\n    return null;\n  }\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;","map":null,"metadata":{},"sourceType":"module"}