{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTileClasses = exports.between = exports.doRangesOverlap = exports.isRangeWithinRange = exports.isValueWithinRange = exports.callIfDefined = exports.mergeFunctions = void 0;\nvar _dates = require(\"./dates\");\n\n/**\n * Returns a function that, when called, calls all the functions\n * passed to it, applying its arguments to them.\n *\n * @param {Function[]} functions\n */\nvar mergeFunctions = function mergeFunctions() {\n  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n    functions[_key] = arguments[_key];\n  }\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return functions.filter(Boolean).forEach(function (f) {\n      return f.apply(void 0, args);\n    });\n  };\n};\n/**\n * Calls a function, if it's defined, with specified arguments\n * @param {Function} fn\n * @param {Object} args\n */\n\nexports.mergeFunctions = mergeFunctions;\nvar callIfDefined = function callIfDefined(fn) {\n  if (fn && typeof fn === 'function') {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    fn.apply(void 0, args);\n  }\n};\nexports.callIfDefined = callIfDefined;\nvar isValueWithinRange = function isValueWithinRange(value, range) {\n  return range[0] <= value && range[1] >= value;\n};\nexports.isValueWithinRange = isValueWithinRange;\nvar isRangeWithinRange = function isRangeWithinRange(greaterRange, smallerRange) {\n  return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];\n};\nexports.isRangeWithinRange = isRangeWithinRange;\nvar doRangesOverlap = function doRangesOverlap(range1, range2) {\n  return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);\n};\n/**\n * Returns a value no smaller than min and no larger than max.\n *\n * @param {*} value Value to return.\n * @param {*} min Minimum return value.\n * @param {*} max Maximum return value.\n */\n\nexports.doRangesOverlap = doRangesOverlap;\nvar between = function between(value, min, max) {\n  if (min && min > value) {\n    return min;\n  }\n  if (max && max < value) {\n    return max;\n  }\n  return value;\n};\nexports.between = between;\nvar getTileClasses = function getTileClasses() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    value = _ref.value,\n    valueType = _ref.valueType,\n    date = _ref.date,\n    dateType = _ref.dateType,\n    hover = _ref.hover;\n  var className = 'react-calendar__tile';\n  var classes = [className];\n  if (!date) {\n    return classes;\n  }\n  if (!(date instanceof Array) && !dateType) {\n    throw new Error('getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.');\n  }\n  var now = new Date();\n  var dateRange = date instanceof Array ? date : (0, _dates.getRange)(dateType, date);\n  if (isValueWithinRange(now, dateRange)) {\n    classes.push(\"\".concat(className, \"--now\"));\n  }\n  if (!value) {\n    return classes;\n  }\n  if (!(value instanceof Array) && !valueType) {\n    throw new Error('getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.');\n  }\n  var valueRange = value instanceof Array ? value : (0, _dates.getRange)(valueType, value);\n  if (isRangeWithinRange(valueRange, dateRange)) {\n    classes.push(\"\".concat(className, \"--active\"));\n  } else if (doRangesOverlap(valueRange, dateRange)) {\n    classes.push(\"\".concat(className, \"--hasActive\"));\n  } else if (hover && (\n  // Date before value\n  dateRange[1] < valueRange[0] && doRangesOverlap(dateRange, [hover, valueRange[0]]) ||\n  // Date after value\n  dateRange[0] > valueRange[1] && doRangesOverlap(dateRange, [valueRange[1], hover]))) {\n    classes.push(\"\".concat(className, \"--hover\"));\n  }\n  var isRangeStart = isValueWithinRange(valueRange[0], dateRange);\n  var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);\n  if (isRangeStart) {\n    classes.push(\"\".concat(className, \"--rangeStart\"));\n  }\n  if (isRangeEnd) {\n    classes.push(\"\".concat(className, \"--rangeEnd\"));\n  }\n  if (isRangeStart && isRangeEnd) {\n    classes.push(\"\".concat(className, \"--rangeBothEnds\"));\n  }\n  return classes;\n};\nexports.getTileClasses = getTileClasses;","map":null,"metadata":{},"sourceType":"script"}